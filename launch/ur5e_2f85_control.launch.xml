<?xml version="1.0"?>
<launch>
  <!-- Export env variable so that gazebo finds our models -->
  <env name="GAZEBO_MODEL_PATH"
       value="$(find ailab)/models:$(optenv GAZEBO_MODEL_PATH)" />


  <!-- Parameters we share with ur_robot_driver -->
  <arg name="controller_config_file" default="$(find ailab)/config/ur5e_2f85_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller"/>
  <arg name="stopped_controllers" default="joint_group_pos_controller"/>


  <!-- Robot pose -->
  <arg name="x"           default="0"     doc="How far forward to place the base of the robot in [m]?" />
  <arg name="y"           default="0"     doc="How far leftwards to place the base of the robot in [m]?" />
  <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)." />
  <arg name="gazebo_world" default="empty.world" doc="The '.world' file to load in Gazebo." />
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
  <arg name="paused" default="true" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  <arg name="spawn_z" default="0.1" doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

  <!-- arg name="initial_joint_positions"
       doc="Initial joint configuration. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'."
       default="
                -J shoulder_roll -0.785398163
                -J shoulder_pitch -0.785398163
                -J shoulder_yaw -0.785398163"
       / -->
        
  <!-- Start Gazebo and load the world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Send robot urdf to param server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find ailab)/launch/urdf/ur5e_2f85.xacro'" />

  <!-- Spawn the model loaded earlier in the simulation just started -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -x $(arg x)
      -y $(arg y)
      -z $(arg z)
      -unpause"
    output="screen" respawn="false" /> 


  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>
